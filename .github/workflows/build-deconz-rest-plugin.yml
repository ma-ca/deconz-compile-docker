name: Build deconz-rest-plugin

on:
  workflow_dispatch:
    inputs:
      push_image:
        description: 'Run docker push to ghcr.io'
        required: true
        type: boolean
    
env:
  image_name: ""
  uname: ""
  version: ""
  qtversion: ""

jobs:
  build-compile:
    strategy:
      matrix:
        os:
        - arm32v6/debian:buster
        - arm32v6/debian:bullseye
        - arm32v7/debian:buster
        - arm32v7/debian:bullseye
        - arm64v8/debian:buster
        - arm64v8/debian:bullseye
        # - x86_64/ubuntu:xenial
        # - x86_64/ubuntu:bionic
        # - x86_64/ubuntu:focal
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    
    - name: Checkout dresden-elektronik/deconz-rest-plugin
      uses: actions/checkout@v2
      with:
        repository: dresden-elektronik/deconz-rest-plugin
        path: deconz-rest-plugin
        fetch-depth: 0
    
    - name: Check release
      id: check
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        cd deconz-rest-plugin
        gitcommit=$(git rev-parse --short HEAD)
        VERSION="$(git describe --tags $(git rev-list --tags --max-count=1) )-${gitcommit}"
        cd ..
        echo "check release = $VERSION"
        update_release=false
        gh release view $VERSION || update_release=true
        gh release list
        echo "update_release=${update_release}" >> ${GITHUB_ENV}
    
    - name: Run docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
      run: docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
    
    - name: Set image_name
      run: |
        BASE_IMAGE=$(basename ${{ matrix.os }} )
        CPU=$(dirname ${{ matrix.os }} )
        
        release=$(echo ${BASE_IMAGE} | cut -d: -f2 )
        image_name=ghcr.io/${{ github.repository_owner }}/deconz-dev-${release}-${CPU}
        echo "image_name=${image_name}" >> ${GITHUB_ENV}
        echo "release=${release}-${CPU}" >> ${GITHUB_ENV}
    
    - name: Show image_name ${{ env.image_name }}
      run: echo "${{ env.image_name }} "
    
    - name: Build docker image from ${{ matrix.os }}
      if: ${{ env.update_release == 'true' || github.event.inputs.push_image == 'true' }}
      run: |
        BASE_IMAGE=$(basename ${{ matrix.os }} )
        CPU=$(dirname ${{ matrix.os }} )
        repository="http://archive.raspbian.org/raspbian"
        arch=armhf
        qemu=""
        if [ "x$CPU" = "xarm32v6" ]; then
          qemu="ENV QEMU_CPU=arm1176"
        fi
        if [ "x$CPU" = "xarm64v8" ]; then
          arch="arm64"
          repository="http://deb.debian.org/debian"
        fi
        release=$(echo ${BASE_IMAGE} | cut -d: -f2 )
        docker build -t ${{ env.image_name }} -f Dockerfile-deconz-dev-${release}-${CPU} .
      
    - name: Show docker image ${{ env.image_name }} cpu uname -m
      if: ${{ env.update_release == 'true' }}
      run: docker run --rm ${{ env.image_name }} uname -m | xargs -i echo "uname={}" >> ${GITHUB_ENV}
      
    - name: Show uname -m = ${{ env.uname }}
      run: echo "uname -m = ${{ env.uname }}"
    
    - name: Show version
      if: ${{ env.update_release == 'true' }}
      run: |
        version=$(docker run --rm ${{ env.image_name }} dpkg -s deconz-dev | sed -n "/^Version: / s/^Version: \([^-]*\).*/\1/p" )
        echo "version=${version}" | tee -a ${GITHUB_ENV}
        qtversion=$(docker run --rm ${{ env.image_name }} qmake -v | grep "Qt version" )
        echo "qtversion=${qtversion}" | tee -a ${GITHUB_ENV}
    
    - name: ${{ env.qtversion }}
      run: echo ${{ env.qtversion }}
      
    - name: Using deconz version ${{ env.version }}
      run: echo ${{ env.version }}

    - name: Run docker push ${{ github.event.inputs.push_image == 'true' }}
      if: ${{ github.event.inputs.push_image == 'true' }}
      run: |
        docker login ghcr.io -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }}
        docker tag ${{ env.image_name }} ${{ env.image_name }}:${{ env.version }}
        docker push ${{ env.image_name }}
        docker push ${{ env.image_name }}:${{ env.version }}

    - name: Compile using docker image ${{ env.image_name }}
      continue-on-error: true
      if: ${{ env.update_release == 'true' }}
      run: |
        docker run --rm -v $(pwd):/deconz -w /deconz ${{ env.image_name }} sh -c "cd deconz-rest-plugin && qmake && make -j2"
        mv libde_rest_plugin.so libde_rest_plugin.so.${{ env.release }}
        
    - name: Upload libdeconz_cli_plugin.so.${{ env.release }}
      continue-on-error: true
      if: ${{ env.update_release == 'true' }}
      uses: actions/upload-artifact@v2
      with:
        name: libde_rest_plugin.so.${{ env.release }}
        path: libde_rest_plugin.so.${{ env.release }}

  build-release:
    runs-on: ubuntu-latest
    needs: build-compile
    outputs:
      release: ${{ steps.create.outputs.release }}
    steps:
    - uses: actions/checkout@v2
    
    - uses: actions/checkout@v2
      with:
        repository: dresden-elektronik/deconz-rest-plugin
        path: deconz-rest-plugin
        fetch-depth: 0
    
    - name: Create release
      id: create
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        cd deconz-rest-plugin
        gitcommit=$(git rev-parse --short HEAD)
        gittag=$(git rev-list --tags --max-count=1)
        VERSION="$(git describe --tags $(git rev-list --tags --max-count=1) )-${gitcommit}"
        git log ${gittag}~1..HEAD | tee ../NOTES.txt
        echo "::set-output name=release::${VERSION}"
        cd ..
        gh release view $VERSION || gh release create $VERSION --notes-file NOTES.txt
        gh release list
        
  upload-files:
    runs-on: ubuntu-latest
    needs: build-release
    strategy:
      matrix:
        release:
        - libde_rest_plugin.so.buster-arm32v6
        - libde_rest_plugin.so.buster-arm32v7
        - libde_rest_plugin.so.buster-arm64v8
        - libde_rest_plugin.so.bullseye-arm32v6
        - libde_rest_plugin.so.bullseye-arm32v7
        - libde_rest_plugin.so.bullseye-arm64v8
        # - libde_rest_plugin.so.xenial-x86_64
        # - libde_rest_plugin.so.bionic-x86_64
        # - libde_rest_plugin.so.focal-x86_64
    steps:
    - uses: actions/checkout@v2

    - name: Download artifact ${{ matrix.release }}
      continue-on-error: true
      uses: actions/download-artifact@v2
      with:
        name: ${{ matrix.release }}
    
    - name: Upload ${{ matrix.release }} to release ${{ env.gitrelease }}
      continue-on-error: true
      run: gh release upload ${{ needs.build-release.outputs.release }} "${{ matrix.release }}" --clobber
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
